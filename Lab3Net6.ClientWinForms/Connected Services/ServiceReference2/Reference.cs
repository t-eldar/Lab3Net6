//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Todo", Namespace="http://schemas.datacontract.org/2004/07/Lab3Net6.Data.Models")]
    public partial class Todo : object
    {
        
        private string DescriptionField;
        
        private int IdField;
        
        private bool IsDoneField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDone
        {
            get
            {
                return this.IsDoneField;
            }
            set
            {
                this.IsDoneField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ITodoService")]
    public interface ITodoService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTodos", ReplyAction="http://tempuri.org/ITodoService/GetTodosResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/ITodoService/GetTodosStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.Threading.Tasks.Task<ServiceReference2.Todo[]> GetTodosAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/CreateTodo", ReplyAction="http://tempuri.org/ITodoService/CreateTodoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/ITodoService/CreateTodoStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.Threading.Tasks.Task CreateTodoAsync(ServiceReference2.Todo todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/DeleteTodo", ReplyAction="http://tempuri.org/ITodoService/DeleteTodoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/ITodoService/DeleteTodoStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.Threading.Tasks.Task DeleteTodoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/UpdateTodo", ReplyAction="http://tempuri.org/ITodoService/UpdateTodoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/ITodoService/UpdateTodoStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        System.Threading.Tasks.Task UpdateTodoAsync(int id, ServiceReference2.Todo todo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ITodoServiceChannel : ServiceReference2.ITodoService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<ServiceReference2.ITodoService>, ServiceReference2.ITodoService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TodoServiceClient() : 
                base(TodoServiceClient.GetDefaultBinding(), TodoServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITodoService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TodoServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TodoServiceClient.GetBindingForEndpoint(endpointConfiguration), TodoServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TodoServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TodoServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TodoServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TodoServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.Todo[]> GetTodosAsync(int userId)
        {
            return base.Channel.GetTodosAsync(userId);
        }
        
        public System.Threading.Tasks.Task CreateTodoAsync(ServiceReference2.Todo todo)
        {
            return base.Channel.CreateTodoAsync(todo);
        }
        
        public System.Threading.Tasks.Task DeleteTodoAsync(int id)
        {
            return base.Channel.DeleteTodoAsync(id);
        }
        
        public System.Threading.Tasks.Task UpdateTodoAsync(int id, ServiceReference2.Todo todo)
        {
            return base.Channel.UpdateTodoAsync(id, todo);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITodoService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITodoService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5000/TodoService/basichttp");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TodoServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITodoService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TodoServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITodoService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ITodoService,
        }
    }
}
